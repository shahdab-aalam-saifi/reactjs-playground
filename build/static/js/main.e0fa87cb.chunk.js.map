{"version":3,"sources":["components/Button/index.js","components/Sort/index.js","constants/index.js","components/Table/index.js","components/Search/index.js","components/Loading/index.js","components/withLoading/index.js","components/App/App.js","serviceWorker.js","index.js"],"names":["Button","onClick","className","children","type","defaultProps","Sort","sortKey","activeSortKey","onSort","sortClass","classNames","PATH_BASE","SORTS","NONE","list","TITLE","sortBy","AUTHOR","COMMENTS","reverse","POINTS","Table","isSortReverse","onDismiss","largeColumn","width","midColumn","smallColumn","sortedList","reverseSortedList","style","map","item","key","objectID","href","url","title","author","num_comments","points","Search","this","input","focus","props","value","onChange","onSubmit","ref","node","Component","Loading","withLoading","isLoading","rest","ButtonWithLoading","App","_isMounted","state","results","searchKey","searchTerm","error","needsToSearchTopStories","bind","setSearchTopStories","fetchSearchTopStories","onSearchChange","onSearchSubmit","setState","result","hits","page","oldHits","updatedHits","axios","then","data","catch","event","target","preventDefault","id","filter","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.e0fa87cb.chunk.js","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst Button = ({ onClick, className, children }) => (\n  <button onClick={onClick} className={className} type=\"button\">\n    {children}\n  </button>\n);\n\nButton.defaultProps = {\n  className: \"\"\n};\n\nButton.propTypes = {\n  onClick: PropTypes.func.isRequired,\n  className: PropTypes.string,\n  children: PropTypes.node.isRequired\n};\n\nexport default Button;\n","import React from \"react\";\nimport classNames from \"classnames\";\n\nimport Button from \"../Button\";\n\nconst Sort = ({ sortKey, activeSortKey, onSort, children }) => {\n  const sortClass = classNames(\"button-inline\", {\n    \"button-active\": sortKey === activeSortKey\n  });\n\n  return (\n    <Button onClick={() => onSort(sortKey)} className={sortClass}>\n      {children}\n    </Button>\n  );\n};\n\nexport default Sort;\n","import { sortBy } from \"lodash\";\n\nexport const DEFAULT_QUERY = \"redux\";\nexport const DEFAULT_HPP = \"10\";\n\nexport const PATH_BASE = \"https://hn.algolia.com/api/v1\";\nexport const PATH_SEARCH = \"/search\";\nexport const PARAM_SEARCH = \"query=\";\nexport const PARAM_PAGE = \"page=\";\nexport const PARAM_HPP = \"hitsPerPage=\";\n\nexport const SORTS = {\n  NONE: list => list,\n  TITLE: list => sortBy(list, \"title\"),\n  AUTHOR: list => sortBy(list, \"author\"),\n  COMMENTS: list => sortBy(list, \"num_comments\").reverse(),\n  POINTS: list => sortBy(list, \"points\").reverse()\n};\n","import React from \"react\";\nimport Button from \"../Button\";\nimport Sort from \"../Sort\";\nimport PropTypes from \"prop-types\";\nimport { SORTS } from \"../../constants\";\n\nconst Table = ({ list, sortKey, isSortReverse, onSort, onDismiss }) => {\n  const largeColumn = {\n    width: \"40%\"\n  };\n  const midColumn = {\n    width: \"30%\"\n  };\n  const smallColumn = {\n    width: \"10%\"\n  };\n\n  const sortedList = SORTS[sortKey](list);\n  const reverseSortedList = isSortReverse ? sortedList.reverse() : sortedList;\n\n  return (\n    <div className=\"table\">\n      <div className=\"table-header\">\n        <span style={{ width: \"40%\" }}>\n          <Sort sortKey={\"TITLE\"} onSort={onSort} activeSortKey={sortKey}>\n            Title\n          </Sort>\n        </span>\n        <span style={{ width: \"30%\" }}>\n          <Sort sortKey={\"AUTHOR\"} onSort={onSort} activeSortKey={sortKey}>\n            Author\n          </Sort>\n        </span>\n        <span style={{ width: \"10%\" }}>\n          <Sort sortKey={\"COMMENTS\"} onSort={onSort} activeSortKey={sortKey}>\n            Comments\n          </Sort>\n        </span>\n        <span style={{ width: \"10%\" }}>\n          <Sort sortKey={\"POINTS\"} onSort={onSort} activeSortKey={sortKey}>\n            Points\n          </Sort>\n        </span>\n        <span style={{ width: \"10%\" }}>\n          <Sort sortKey={\"NONE\"} onSort={() => {}} activeSortKey={sortKey}>\n            Archive\n          </Sort>\n        </span>\n      </div>\n      {reverseSortedList.map(item => (\n        <div key={item.objectID} className=\"table-row\">\n          <span style={largeColumn}>\n            <a href={item.url}>{item.title}</a>\n          </span>\n          <span style={midColumn}>{item.author}</span>\n          <span style={smallColumn}>{item.num_comments}</span>\n          <span style={smallColumn}>{item.points}</span>\n          <span style={smallColumn}>\n            <Button\n              onClick={() => onDismiss(item.objectID)}\n              className=\"button-inline\"\n            >\n              Dismiss\n            </Button>\n          </span>\n        </div>\n      ))}\n    </div>\n  );\n};\n\nTable.propTypes = {\n  list: PropTypes.arrayOf(\n    PropTypes.shape({\n      objectID: PropTypes.string.isRequired,\n      author: PropTypes.string,\n      url: PropTypes.string,\n      num_comments: PropTypes.number,\n      points: PropTypes.number\n    })\n  ).isRequired,\n  onDismiss: PropTypes.func.isRequired\n};\n\nexport default Table;\n","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\n\nclass Search extends Component {\n  componentDidMount() {\n    if (this.input) {\n      this.input.focus();\n    }\n  }\n\n  render() {\n    const { value, onChange, onSubmit, children } = this.props;\n\n    return (\n      <form onSubmit={onSubmit}>\n        <input\n          type=\"text\"\n          value={value}\n          onChange={onChange}\n          ref={node => {\n            this.input = node;\n          }}\n        />\n        <button type=\"submit\">{children}</button>\n      </form>\n    );\n  }\n}\n\nSearch.defaultProps = {\n  value: \"\",\n  onChange: () => {},\n  children: \"Submit\"\n};\n\nSearch.propTypes = {\n  value: PropTypes.string,\n  onChange: PropTypes.func,\n  onSubmit: PropTypes.func.isRequired,\n  children: PropTypes.node\n};\n\nexport default Search;\n","import React from \"react\";\n\nconst Loading = () => <div>Loading...</div>;\n\nexport default Loading;\n","import React from \"react\";\nimport Loading from \"../Loading\";\nimport Button from \"../Button\";\n\nconst withLoading = Component => ({ isLoading, ...rest }) =>\n  isLoading ? <Loading /> : <Component {...rest} />;\n\nexport const ButtonWithLoading = withLoading(Button);\n\nexport default withLoading;\n","import \"./App.css\";\nimport React, { Component } from \"react\";\nimport axios from \"axios\";\n\nimport Table from \"../Table\";\nimport Search from \"../Search\";\nimport { ButtonWithLoading } from \"../withLoading\";\n\nimport {\n  DEFAULT_QUERY,\n  DEFAULT_HPP,\n  PARAM_HPP,\n  PARAM_PAGE,\n  PARAM_SEARCH,\n  PATH_BASE,\n  PATH_SEARCH\n} from \"../../constants\";\n\nclass App extends Component {\n  _isMounted = false;\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      results: null,\n      searchKey: \"\",\n      searchTerm: DEFAULT_QUERY,\n      error: null,\n      isLoading: false,\n      sortKey: \"NONE\",\n      isSortReverse: false\n    };\n\n    this.needsToSearchTopStories = this.needsToSearchTopStories.bind(this);\n    this.setSearchTopStories = this.setSearchTopStories.bind(this);\n    this.fetchSearchTopStories = this.fetchSearchTopStories.bind(this);\n    this.onSearchChange = this.onSearchChange.bind(this);\n    this.onSearchSubmit = this.onSearchSubmit.bind(this);\n    this.onDismiss = this.onDismiss.bind(this);\n    this.onSort = this.onSort.bind(this);\n  }\n\n  componentDidMount() {\n    this._isMounted = true;\n    const { searchTerm } = this.state;\n    this.setState({ searchKey: searchTerm });\n    this.fetchSearchTopStories(searchTerm);\n  }\n\n  componentWillUnmount() {\n    this._isMounted = false;\n  }\n\n  needsToSearchTopStories(searchTerm) {\n    return !this.state.results[searchTerm];\n  }\n\n  setSearchTopStories(result) {\n    const { hits, page } = result;\n    const { searchKey, results } = this.state;\n\n    const oldHits =\n      results && results[searchKey] ? results[searchKey].hits : [];\n\n    const updatedHits = [...oldHits, ...hits];\n\n    this.setState({\n      results: {\n        ...results,\n        [searchKey]: { hits: updatedHits, page }\n      },\n      isLoading: false\n    });\n  }\n\n  fetchSearchTopStories(searchTerm, page = 0) {\n    this.setState({ isLoading: true });\n    axios(\n      `${PATH_BASE}${PATH_SEARCH}?${PARAM_SEARCH}${searchTerm}&${PARAM_PAGE}${page}&${PARAM_HPP}${DEFAULT_HPP}`\n    )\n      .then(result => this._isMounted && this.setSearchTopStories(result.data))\n      .catch(error => this._isMounted && this.setState({ error }));\n  }\n\n  onSearchChange(event) {\n    this.setState({ searchTerm: event.target.value });\n  }\n\n  onSearchSubmit(event) {\n    event.preventDefault();\n    const { searchTerm } = this.state;\n    this.setState({ searchKey: searchTerm });\n    if (this.needsToSearchTopStories(searchTerm)) {\n      this.fetchSearchTopStories(searchTerm);\n    }\n  }\n\n  onDismiss(id) {\n    const { searchKey, results } = this.state;\n    const { hits, page } = results[searchKey];\n\n    const isNotId = item => item.objectID !== id;\n    const updatedHits = hits.filter(isNotId);\n\n    this.setState({\n      results: {\n        ...results,\n        [searchKey]: { hits: updatedHits, page }\n      }\n    });\n  }\n\n  onSort(sortKey) {\n    const isSortReverse = this.state.sortKey === sortKey && !this.state.isSortReverse;\n    this.setState({ sortKey, isSortReverse });  }\n\n  render() {\n    const {\n      searchTerm,\n      results,\n      searchKey,\n      error,\n      isLoading,\n      sortKey,\n      isSortReverse\n    } = this.state;\n\n    const page =\n      (results && results[searchKey] && results[searchKey].page) || 0;\n\n    const list =\n      (results && results[searchKey] && results[searchKey].hits) || [];\n\n    return (\n      <div className=\"page\">\n        <div className=\"interactions\">\n          <Search\n            value={searchTerm}\n            onChange={this.onSearchChange}\n            onSubmit={this.onSearchSubmit}\n          >\n            Search\n          </Search>\n        </div>\n        {error ? (\n          <div className=\"interactions\">\n            <p>Something went wrong.</p>\n          </div>\n        ) : (\n          <Table\n            list={list}\n            sortKey={sortKey}\n            isSortReverse={isSortReverse}\n            onSort={this.onSort}\n            onDismiss={this.onDismiss}\n          />\n        )}\n        <div className=\"interactions\">\n          <ButtonWithLoading\n            isLoading={isLoading}\n            onClick={() => this.fetchSearchTopStories(searchKey, page + 1)}\n          >\n            More\n          </ButtonWithLoading>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from \"./components/App\"\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// Hot Module Replacement\nif (module.hot) {\n    module.hot.accept();\n}\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}